deploy:
  name: Deploy to EC2 (CloudFormation)
  runs-on: ubuntu-latest
  needs: test
  steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.release.tag_name }}

    - name: Configure AWS credentials (Access Keys)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ secrets.AWS_REGION }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Deploy CloudFormation stack
      run: |
        aws cloudformation deploy \
          --template-file template.yml \
          --stack-name hfv-vereine-ec2 \
          --capabilities CAPABILITY_IAM \
          --parameter-overrides \
            VpcId=${{ secrets.AWS_VPC_ID }} \
            SubnetId=${{ secrets.AWS_SUBNET_ID }} \
            KeyName=${{ secrets.AWS_KEY_NAME }} \
            AmiId=${{ secrets.AWS_AMI_ID }} \
          --no-fail-on-empty-changeset

    - name: Print App URL
      run: |
        aws cloudformation describe-stacks \
          --stack-name hfv-vereine-ec2 \
          --query "Stacks[0].Outputs[?starts_with(OutputKey,'AppURL')].[OutputKey,OutputValue]" \
          --output table

    - name: In-place app update via SSM (checkout release tag + restart)
      env:
        TAG: ${{ github.event.release.tag_name }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        set -euo pipefail

        # EC2 InstanceId aus dem Stack ermitteln
        INSTANCE_ID=$(aws cloudformation list-stack-resources \
          --stack-name hfv-vereine-ec2 \
          --query "StackResourceSummaries[?ResourceType=='AWS::EC2::Instance'].PhysicalResourceId" \
          --output text)

        # SSM-Befehl senden: auf Release-Tag wechseln, deps aktualisieren, Service neustarten
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids "$INSTANCE_ID" \
          --document-name "AWS-RunShellScript" \
          --comment "HFV Vereine deploy $TAG" \
          --parameters commands="[
            \"set -euxo pipefail\",
            \"cd /home/ec2-user/app\",
            \"sudo -u ec2-user git fetch --tags --prune\",
            \"sudo -u ec2-user git checkout $TAG\",
            \"/usr/bin/python3.11 -m pip install -r requirements.txt || true\",
            \"sudo systemctl restart fastapi\"
          ]" \
          --query "Command.CommandId" \
          --output text)

        # Optional: auf Abschluss warten & Ausgabe zeigen
        aws ssm list-command-invocations \
          --command-id "$COMMAND_ID" \
          --details \
          --output table
